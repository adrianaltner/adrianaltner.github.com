---
import Layout from '~/layouts/BlogLayout.astro';
import Pagination from "~/components/Pagination.astro";
import PostPreview from "~/components/PostPreview.astro";
import { SITE } from '~/site.config';
import type { Page, GetStaticPaths } from 'astro';
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';

const meta = {
  title: "Blog | " + SITE.title,
  description: "Blog",
};

export const getStaticPaths = (async ({ paginate }) => {
  const posts = (await getCollection("blog")).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );
  
  const tags = [...new Set(posts.flatMap(post => post.data.tags))].sort((a, b) => a.charAt(0).toLowerCase().localeCompare(b.charAt(0).toLowerCase()));
  const categories = (await getCollection('categories')).sort((a, b) => a.data.title.charAt(0).toLowerCase().localeCompare(b.data.title.charAt(0).toLowerCase()));
  
  // Always generate at least one page, even if there are no posts
  return paginate(posts, { 
    pageSize: SITE.blogPostsPerPage,
    props: { showEmpty: posts.length === 0, tags, categories }
  });
}) satisfies GetStaticPaths;

interface Props {
  page: Page<CollectionEntry<'blog'>>;
  showEmpty: boolean;
  tags: string[];
  categories: CollectionEntry<'categories'>[];
};

const { page, showEmpty, tags, categories } = Astro.props;

---

<Layout {meta}>
  <div id="Categories" class="taxonomy-section">
    <h2>Categories</h2>
    <div class="taxonomy-items">
      {categories.map((category) => (
        <a
          href={`/blog/category/${category.id}`}
          class="taxonomy-link category"
        >
          {category.data.title || category.id}
        </a>
      ))}
    </div>
  </div>

  <div id="Tags" class="taxonomy-section">
    <h2>Tags</h2>
    <div class="taxonomy-items">
      {tags.map((tag) => (
        <a
          href={`/blog/tag/${tag}`}
          class="taxonomy-link tag"
        >
          #{tag}
        </a>
      ))}
    </div>
  </div>


  <section class="blog-list">
    {showEmpty ? (
      <p>No blog posts yet. Check back soon!</p>
    ) : (
    <ul>
      {
        page.data.map((post) => (
          <PostPreview post={post} />
        ))
      }
    </ul>
    )}
  </section>
  {(page.url.next || page.url.prev) && <Pagination page={page} />}
</Layout>

<style>
  section {
    container-type: inline-size;
    container-name: blog-list;
  }
  ul {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    list-style-type: none;
    margin: 0;
    padding: 0;
  }

  .taxonomy-section {
    margin-bottom: 2rem;
  }

  .taxonomy-section h2 {
    font-size: 1.25rem;
    font-weight: bold;
    margin-bottom: 1rem;
  }

  .taxonomy-items {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .taxonomy-link {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    transition: background-color 0.2s;
    text-decoration: none;
  }

  .taxonomy-link.category {
    background-color: #f3f4f6;
  }

  .taxonomy-link.category:hover {
    background-color: #e5e7eb;
  }

  .taxonomy-link.tag {
    background-color: #eff6ff;
  }

  .taxonomy-link.tag:hover {
    background-color: #dbeafe;
  }
</style>